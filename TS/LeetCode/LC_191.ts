/*
 * @Author: tangdaoyong
 * @Date: 2021-03-22 09:15:35
 * @LastEditors: tangdaoyong
 * @LastEditTime: 2021-03-22 09:30:36
 * @Description: 位1的个数
 */
/*
191. 位1的个数
编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。

提示：

请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。
提示：

输入必须是长度为 32 的 二进制串 。
 

进阶：

如果多次调用这个函数，你将如何优化你的算法？
*/
/**
 * 按位与运算（`&`）的一个性质是：对于任意整数 `x`，令 `x=x&(x−1)`，该运算将 `x` 的二进制表示的最后一个 `1` 变成 `0`。因此，对 `x` 重复该操作，直到 `x` 变成 `0`，则操作次数即为 `x` 的`「一比特数」`。
 * @param n 
 * @returns 
 * 执行用时：
96 ms
, 在所有 TypeScript 提交中击败了
71.43%
的用户
内存消耗：
39.7 MB
, 在所有 TypeScript 提交中击败了
70.24%
的用户
 */
function hammingWeight(n: number): number {
    let ans = 0
    // while (n > 0) {
    //     n = n & (n - 1)
    //     ans += 1
    // }
    // js中number是有符号的，所有需要设置!== 0，已处理负数情况
    while (n !== 0) {
        n = n&(n - 1)
        ans += 1
    }
    return ans
};